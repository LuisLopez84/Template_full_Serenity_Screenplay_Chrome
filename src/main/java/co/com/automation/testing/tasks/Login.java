package co.com.automation.testing.tasks;

import co.com.automation.testing.ui.LoginPage;
import net.serenitybdd.screenplay.Actor;
import net.serenitybdd.screenplay.Task;
import net.serenitybdd.screenplay.actions.Click;
import net.serenitybdd.screenplay.actions.Enter;

import static net.serenitybdd.screenplay.Tasks.instrumented;

public class Login implements Task {

    private final String username;
    private final String password;

    public Login(String username, String password) {
        this.username = username;
        this.password = password;
    }

    @Override
    public <T extends Actor> void performAs(T actor) {
        actor.attemptsTo(
                Enter.theValue(this.username).into(LoginPage.USERNAME),
                Enter.theValue(this.password).into(LoginPage.PASSWORD),
                Click.on(LoginPage.SUBMIT_BUTTON)
        );
    }

    public static Login conCredenciales(String username, String password) {
        return instrumented(Login.class, username, password);
    }
}

/*
üìÑ Documentaci√≥n Clase: Login

üì¶ Paquete:

co.com.automation.testing.tasks


---

üß† Descripci√≥n General:

La clase Login es una implementaci√≥n de una tarea (Task) del patr√≥n Screenplay de Serenity BDD. Representa el proceso de inicio de sesi√≥n en la
aplicaci√≥n, ingresando un nombre de usuario y una contrase√±a, y haciendo clic en el bot√≥n de env√≠o.

Est√° dise√±ada para ser utilizada por un actor como parte de un flujo de pruebas automatizadas en el que se necesita validar el acceso al sistema.


---

üîß Implementaci√≥n:

public class Login implements Task {

    private final String username;
    private final String password;

    public Login(String username, String password) {
        this.username = username;
        this.password = password;
    }

    @Override
    public <T extends Actor> void performAs(T actor) {
        actor.attemptsTo(
                Enter.theValue(this.username).into(LoginPage.USERNAME),
                Enter.theValue(this.password).into(LoginPage.PASSWORD),
                Click.on(LoginPage.SUBMIT_BUTTON)
        );
    }

    public static Login withCredentials(String username, String password) {
        return instrumented(Login.class, username, password);
    }
}


---

üß± Componentes principales:

Elemento Descripci√≥n

username, password Campos privados que almacenan las credenciales que ser√°n utilizadas por el actor.
performAs M√©todo principal que define la secuencia de acciones del actor: ingresar usuario, ingresar contrase√±a y hacer clic en el bot√≥n.
withCredentials M√©todo de factor√≠a que utiliza instrumented para que Serenity cree correctamente la instancia del task con inyecci√≥n de par√°metros.



---

üîÑ Flujo de acciones realizado por esta tarea:

1. Ingresar el nombre de usuario en el campo correspondiente.


2. Ingresar la contrase√±a en el campo correspondiente.


3. Hacer clic en el bot√≥n de login para enviar el formulario.




---

‚úÖ Ejemplo de uso en un paso (StepDefinition):

@When("login with credentials {string} and {string}")
public void loginWithCredentials(String username, String password) {
    OnStage.withCurrentActor(Login.withCredentials(username, password));
}


---

üéØ Beneficios:

Reutilizable: Esta tarea se puede reutilizar en m√∫ltiples escenarios de prueba donde se necesite iniciar sesi√≥n.

Legible: Usa una sintaxis fluida y f√°cil de entender, ideal para equipos que siguen BDD.

Mantenible: Si cambia la l√≥gica de inicio de sesi√≥n, solo necesitas actualizar esta clase.



---

üîê Buenas pr√°cticas:

Aseg√∫rate de tener los Target bien definidos en LoginPage para evitar flakiness.

Puedes extender esta clase para login con errores o campos vac√≠os, si necesitas variantes.
 */

