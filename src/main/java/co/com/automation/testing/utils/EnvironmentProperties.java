package co.com.automation.testing.utils;

import net.serenitybdd.model.environment.EnvironmentSpecificConfiguration;
import net.thucydides.model.configuration.SystemPropertiesConfiguration;
import net.thucydides.model.environment.SystemEnvironmentVariables;
import net.thucydides.model.util.EnvironmentVariables;

public final class EnvironmentProperties {

    private static final SystemPropertiesConfiguration CONFIGURATION = new SystemPropertiesConfiguration(SystemEnvironmentVariables.createEnvironmentVariables());
    private static final EnvironmentVariables ENV_VARIABLES = CONFIGURATION.getEnvironmentVariables();

    private EnvironmentProperties() {
    }

    public static String getProperty(String nameProperty) {
        return EnvironmentSpecificConfiguration.from(ENV_VARIABLES).getProperty(nameProperty);
    }

    public static String getProperties() {

        return EnvironmentProperties.getProperties();
    }
}


/*
üìÑ Documentaci√≥n Clase: EnvironmentProperties

üì¶ Paquete:

co.com.automation.testing.utils


---

üß† Descripci√≥n General:

Esta clase utilitaria proporciona m√©todos para acceder a propiedades definidas en el entorno de ejecuci√≥n de Serenity, como las que est√°n configuradas en
serenity.conf, en system environment variables, o proporcionadas por l√≠nea de comandos con -D.


---

üéØ Prop√≥sito:

Facilitar el acceso centralizado a las propiedades de configuraci√≥n del entorno.

Abstraer la l√≥gica de carga y lectura de propiedades desde serenity.conf.

Ser usada por otras clases para adaptar comportamientos din√°micamente, como en pruebas para BrowserStack u otros entornos.



---

üîç An√°lisis de Componentes:

üîπ Atributos:

private static final SystemPropertiesConfiguration CONFIGURATION =
    new SystemPropertiesConfiguration(SystemEnvironmentVariables.createEnvironmentVariables());
private static final EnvironmentVariables ENV_VARIABLES = CONFIGURATION.getEnvironmentVariables();

CONFIGURATION: Carga la configuraci√≥n del sistema y del archivo serenity.conf.

ENV_VARIABLES: Contiene todas las variables del entorno disponibles para Serenity.



---

üîπ Constructor privado:

private EnvironmentProperties() { }

Evita que la clase sea instanciada, ya que todos sus m√©todos son est√°ticos (patr√≥n utility class).



---

‚úÖ M√©todo: getProperty(String nameProperty)

public static String getProperty(String nameProperty) {
    return EnvironmentSpecificConfiguration.from(ENV_VARIABLES).getProperty(nameProperty);
}

Descripci√≥n: Retorna el valor de una propiedad espec√≠fica del archivo serenity.conf o de variables de entorno del sistema.

Ejemplo de uso:

String url = EnvironmentProperties.getProperty("pages.url");



---

‚ö†Ô∏è M√©todo con error: getProperties()

public static String getProperties() {
    return EnvironmentProperties.getProperties();
}

‚ùå Problema: El m√©todo se llama recursivamente a s√≠ mismo sin condici√≥n de salida, lo que produce un StackOverflowError si se llama.

‚úîÔ∏è Soluci√≥n sugerida: Si la intenci√≥n es retornar todas las propiedades como String, deber√≠as hacer algo como:

public static String getProperties() {
    return ENV_VARIABLES.toString();
}



---

üåê Clases Relacionadas:

serenity.conf: Archivo de configuraci√≥n base.

SystemEnvironmentVariables: Clase de Serenity que obtiene todas las variables de entorno.

EnvironmentSpecificConfiguration: Permite leer propiedades espec√≠ficas desde Serenity.

Usada en clases como Hooks.java para obtener propiedades como environment.



---

üìå Ejemplo de uso:

if (EnvironmentProperties.getProperty("environment").startsWith("BS")) {
    // Ejecutar l√≥gica espec√≠fica para BrowserStack
}


---

‚úÖ Beneficios:

Encapsula y centraliza la l√≥gica de configuraci√≥n.

Facilita el uso de entornos din√°micos (dev, QA, prod, BrowserStack).

Reduce el acoplamiento entre clases al acceder a configuraci√≥n.
 */
