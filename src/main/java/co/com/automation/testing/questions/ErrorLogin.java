package co.com.automation.testing.questions;

import co.com.automation.testing.ui.LoginPage;
import net.serenitybdd.screenplay.Actor;
import net.serenitybdd.screenplay.Question;
import net.serenitybdd.screenplay.ensure.Ensure;
import net.serenitybdd.screenplay.targets.Target;

public class ErrorLogin implements Question<Boolean> {
    private final String message;
    private final Target element;

    public ErrorLogin(String message, Target element) {
        this.message = message;
        this.element = element;
    }

    @Override
    public Boolean answeredBy(Actor actor) {
        actor.attemptsTo(
                Ensure.that(element).isDisplayed(),
                Ensure.that(element).text().contains(message)
        );
        return true;
    }

    public static ErrorLogin porCredencialesInvalidas(String message) {
        return new ErrorLogin(message, LoginPage.ERROR_MESSAGE);
    }

    public static ErrorLogin porNombreDeUsuarioFaltante(String message) {
        return new ErrorLogin(message, LoginPage.MISSING_USERNAME);
    }

    public static ErrorLogin porFaltaDeContrasena(String expectedErrorMessage) {
        return new ErrorLogin(expectedErrorMessage, LoginPage.MISSING_PASSWORD);
    }
}


/*
üìÑ Documentaci√≥n Clase: ErrorLogin

üì¶ Paquete:

co.com.automation.testing.questions


---

üß† Descripci√≥n General:

La clase ErrorLogin es una implementaci√≥n del patr√≥n Question<Boolean> de Serenity BDD + Screenplay. Su prop√≥sito es validar la aparici√≥n de mensajes
de error durante el proceso de inicio de sesi√≥n, permitiendo verificar diferentes tipos de fallos como credenciales inv√°lidas o campos obligatorios vac√≠os.

Se usa en pasos Then para afirmar que el mensaje de error mostrado en la UI coincide con el texto esperado.


---

üîß Implementaci√≥n:

public class ErrorLogin implements Question<Boolean> {
    private final String message;
    private final Target element;

    public ErrorLogin(String message, Target element) {
        this.message = message;
        this.element = element;
    }

    @Override
    public Boolean answeredBy(Actor actor) {
        actor.attemptsTo(
            Ensure.that(element).isDisplayed(),
            Ensure.that(element).text().contains(message)
        );
        return true;
    }

    public static ErrorLogin byInvalidCredentials(String message) {
        return new ErrorLogin(message, LoginPage.ERROR_MESSAGE);
    }

    public static ErrorLogin byMissingUsername(String message) {
        return new ErrorLogin(message, LoginPage.MISSING_USERNAME);
    }

    public static ErrorLogin byMissingPassword(String message) {
        return new ErrorLogin(message, LoginPage.MISSING_PASSWORD);
    }
}


---

üß± Componentes Clave:

Componente Descripci√≥n

message Texto esperado en el mensaje de error.
element Elemento de la UI (Target) que contiene el mensaje de error.
Ensure.that(element).isDisplayed() Verifica que el mensaje de error est√© visible en la interfaz.
Ensure.that(element).text().contains(message) Confirma que el texto del mensaje de error contenga el valor esperado.
M√©todos est√°ticos como byInvalidCredentials(...) Simplifican la creaci√≥n de preguntas espec√≠ficas para distintos errores.



---

üß™ Ejemplo de uso en StepDefinition:

@Then("should see the error message {string} for invalid credentials")
public void shouldSeeErrorMessage(String expectedMessage) {
    theActorInTheSpotlight().should(
        seeThat(ErrorLogin.byInvalidCredentials(expectedMessage))
    );
}


---

‚úÖ Casos que cubre:

‚ùå Usuario o contrase√±a incorrectos ‚Üí LoginPage.ERROR_MESSAGE

‚ùå Usuario faltante ‚Üí LoginPage.MISSING_USERNAME

‚ùå Contrase√±a faltante ‚Üí LoginPage.MISSING_PASSWORD



---

üéØ Ventajas:

Reutilizable: Soporta m√∫ltiples tipos de errores con una sola clase.

Flexible: Permite validar mensajes espec√≠ficos para distintos campos.

Legible y mantenible: Usa Ensure para validaciones expresivas, f√°ciles de rastrear en reportes Serenity.

Modular: Sigue el principio de responsabilidad √∫nica (SRP) para verificar errores.
 */





