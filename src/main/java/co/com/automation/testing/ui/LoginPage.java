package co.com.automation.testing.ui;

import net.serenitybdd.screenplay.targets.Target;
import net.serenitybdd.core.annotations.findby.By;

public class LoginPage {

    private LoginPage() { }

    public static final Target SUBMIT_BUTTON = Target.the("Boton login")
            .locatedBy("//*[@id='app']/div[1]/div/div[1]/div/div[2]/div[2]/form/div[3]/button");
    public static final Target ERROR_MESSAGE = Target.the("Mensaje de error")
            .locatedBy("//*[@id='app']/div[1]/div/div[1]/div/div[2]/div[2]/div/div[1]/div[1]/p");
    public static final Target MISSING_USERNAME = Target.the("Mensaje de error por usuario faltante")
            .locatedBy("//*[@id='app']/div[1]/div/div[1]/div/div[2]/div[2]/form/div[1]/div/span");
    public static final Target USERNAME = Target.the("Campo de usuario")
            .located(By.name("username"));
    public static final Target PASSWORD = Target.the("Campo de contrase√±a")
            .located(By.name("password"));
    public static final Target MISSING_PASSWORD = Target.the("Mensaje de error por contrase√±a faltante")
            .locatedBy("/html/body/div/div[1]/div/div[1]/div/div[2]/div[2]/form/div[2]/div/span");
}

/*
üìÑ Documentaci√≥n Clase: LoginPage

üì¶ Paquete:

co.com.automation.testing.ui


---

üß† Descripci√≥n General:

Esta clase representa la interfaz de usuario de la pantalla de login y define los elementos web (Target) que ser√°n utilizados por los actores durante la ejecuci√≥n de
los escenarios de prueba. Sigue el patr√≥n Page Object Model (POM) para mantener una separaci√≥n clara entre la l√≥gica de prueba y la estructura de la interfaz.


---

üß± Implementaci√≥n:

public class LoginPage {

    private LoginPage() { }

    public static final Target SUBMIT_BUTTON = ...
    public static final Target ERROR_MESSAGE = ...
    public static final Target MISSING_USERNAME = ...
    public static final Target USERNAME = ...
    public static final Target PASSWORD = ...
    public static final Target MISSING_PASSWORD = ...
}


---

üîç Elementos definidos:

Campo Descripci√≥n

SUBMIT_BUTTON Representa el bot√≥n de login que el usuario presiona para autenticar.
ERROR_MESSAGE Captura el mensaje de error que aparece cuando las credenciales son incorrectas.
MISSING_USERNAME Elemento que muestra el mensaje de validaci√≥n cuando el campo de usuario est√° vac√≠o.
USERNAME Campo de entrada para el nombre de usuario. Se identifica por el atributo name="username".
PASSWORD Campo de entrada para la contrase√±a. Se identifica por el atributo name="password".
MISSING_PASSWORD Mensaje de error que aparece si el campo de contrase√±a est√° vac√≠o.



---

üí° Notas T√©cnicas:

Los Target de Serenity describen elementos interactuables en la UI, permitiendo que los tasks y questions los utilicen de forma reutilizable.

Se usa By.name() para localizar los campos de usuario y contrase√±a, mientras que los mensajes y botones se localizan con expresiones XPath, lo cual es √∫til cuando
no hay atributos √∫nicos disponibles.

El constructor privado (private LoginPage()) impide la creaci√≥n de instancias de esta clase, ya que su prop√≥sito es est√°tico y referencial.



---

üéØ Ejemplo de uso en una Task:

Enter.theValue("Admin").into(LoginPage.USERNAME);
Enter.theValue("admin123").into(LoginPage.PASSWORD);
Click.on(LoginPage.SUBMIT_BUTTON);


---

‚úÖ Beneficios:

Mantenibilidad: Centraliza todos los elementos de la p√°gina en una sola clase, facilitando cambios futuros si la UI se modifica.

Legibilidad: Usa nombres descriptivos y claros para cada elemento, lo que mejora la comprensi√≥n de los scripts de prueba.

Reutilizaci√≥n: Los elementos pueden ser utilizados en m√∫ltiples escenarios y definiciones de pasos sin duplicar c√≥digo.
 */




